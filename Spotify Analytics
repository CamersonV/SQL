#For this project, I downloaded Spotify data from Kaggle.
#Then I created a table to insert Spotify data into.
#Finally, I performed analytics on the data using SQL.

#Creating the table:
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#I then inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL.

#First I determined the average danceability by artist and track.

SELECT avg(danceability), artist_name, track_name 
FROM BIT_DB.Spotifydata 
GROUP BY artist_name;  

#Next, I determined the top 10 artists based on popularity.

SELECT artist_name, popularity 
FROM BIT_DB.Spotifydata 
ORDER BY popularity DESC 
LIMIT 10; 

#I then query'd the database to see if I could find which artist released the longest song. 
#Because the duration of each song was quantified using milliseconds, 
#I converted the duration_ms table to minutes to make it easier to read. 

SELECT artist_name, floor(duration_ms / (1000*60)) % 60 as minutes 
FROM BIT_DB.Spotifydata 
ORDER BY duration_ms DESC 
LIMIT 1; 

#I then wanted to figure out the average danceability for the 10 most popular songs.

SELECT track_name, avg(danceability) 
FROM BIT_DB.Spotifydata 
GROUP BY track_name 
ORDER BY popularity DESC 
LIMIT 10 

#I also wanted to determine the average loudness for the 10 most popular songs as well.

SELECT track_name, avg(loudness) 
FROM BIT_DB.spotifydata 
GROUP BY track_name 
ORDER BY popularity DESC 
LIMIT 10;  

#Next, I wanted to determine the average duration of the 10 most popular songs. For this query,
#I decided to keep duration_ms the same as it was on the table.

SELECT track_name, AVG(duration_ms) 
FROM BIT_DB.spotifydata  
GROUP BY track_name  
ORDER BY popularity DESC  
LIMIT 5;  

#After quantifying the average loudness, danceability, and duration of the 10 most popular songs, I then wanted to see
#what the popularity of the song with the most acousticness was.

SELECT track_name, acousticness, popularity 
FROM bit_db.spotifydata  
WHERE acousticness = (SELECT MAX(acousticness) FROM BIT_DB.Spotifydata) 
ORDER BY popularity DESC  
LIMIT 1;  
